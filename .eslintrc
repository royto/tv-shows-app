env:
  es6: true
ecmaFeatures:
  arrowFunctions: true
  binaryLiterals: false
  blockBindings: true
  classes: true
  defaultParams: true
  destructuring: true
  forOf: true
  generators: false
  modules: false
  objectLiteralComputedProperties: true
  objectLiteralDuplicateProperties: false
  objectLiteralShorthandMethods: true
  objectLiteralShorthandProperties: true
  octalLiterals: false
  regexUFlag: false
  regexYFlag: false
  spread: true
  superInFunctions: true
  templateStrings: true
  unicodeCodePointEscapes: false
  globalReturn: false
  jsx: false
rules:
  comma-dangle:
    - 2
    - "never"
  no-cond-assign:
    - 2
    - "always"
  no-console: 1
  no-constant-condition: 2
  no-control-regex: 2
  no-debugger: 2
  no-dupe-args: 2
  no-dupe-keys: 2
  no-duplicate-case: 2
  no-empty: 2
  no-empty-class: 2
  no-ex-assign: 2
  no-extra-boolean-cast: 2
  no-extra-parens: 2
  no-extra-semi: 2
  no-func-assign: 2
  no-inner-declarations: 1
  no-invalid-regexp: 2
  no-irregular-whitespace: 2
  no-negated-in-lhs: 2
  no-obj-calls: 2
  no-regex-spaces: 2
  no-reserved-keys: 1
  no-sparse-arrays: 2
  no-unreachable: 2
  use-isnan: 2
  valid-jsdoc:
    - 2
    - prefer:
        returns: "return"
      requireReturn: false
      requireReturnDescription: false
      requireParamDescription: false
  valid-typeof: 2
  block-scoped-var: 1
  complexity:
    - 2
    - 5
  consistent-return: 1
  curly:
    - 2
    - "all"
  default-case: 1
  dot-notation:
    - 2
    - allowKeywords: true
  eqeqeq: 2
  guard-for-in: 2
  no-alert: 2
  no-caller: 2
  no-div-regex: 2
  no-else-return: 2
  no-empty-label: 2
  no-eq-null: 2
  no-eval: 2
  no-extend-native: 2
  no-extra-bind: 2
  no-fallthrough: 1
  no-floating-decimal: 2
  no-implied-eval: 2
  no-iterator: 2
  no-labels: 1
  no-lone-blocks: 2
  no-loop-func: 2
  no-multi-spaces: 2
  no-multi-str: 2
  no-native-reassign: 2
  no-new: 2
  no-new-func: 2
  no-new-wrappers: 2
  no-octal: 2
  no-octal-escape: 2
  no-param-reassign: 1
  no-process-env: 1
  no-proto: 2
  no-redeclare: 2
  no-return-assign: 2
  no-script-url: 2
  no-self-compare: 2
  no-sequences: 2
  no-throw-literal: 2
  no-unused-expressions: 2
  no-void: 1
  no-warning-comments: 1
  no-with: 2
  radix: 2
  vars-on-top: 0
  wrap-iife:
    - 2
    - "outside"
  yoda:
    - 1
    - "always"
    - exceptRange: false
  strict:
    - 2
    - "function"
  no-catch-shadow: 2
  no-delete-var: 2
  no-label-var: 2
  no-shadow: 1
  no-shadow-restricted-names: 2
  no-undef: 2
  no-undef-init: 1
  no-undefined: 1
  no-unused-vars:
    - 2
    - vars: 'all'
      args: 'after-used'
  no-use-before-define:
    - 2
    - "nofunc"
  handle-callback-err:
    - 2
    - "^err(or)?$"
  no-mixed-requires:
    - 1
    - true
  no-new-require: 2
  no-path-concat: 2
  no-process-exit: 1
  no-restricted-modules: 0
  no-sync: 1
  # FIXME: not checking indentation levels?
  indent:
    - 2
    - 2
    - indentSwitchCase: false
  brace-style:
    - 2
    - "stroustrup"
    - allowSingleLine: true
  camelcase:
    - 2
    - properties: "always"
  comma-spacing:
    - 2
    - before: false
      after: true
  comma-style:
    - 2
    - "last"
  consistent-this:
    - 2
    - "that"
  eol-last: 2
  func-names: 1
  func-style: 0
  key-spacing:
    - 2
    - beforeColon: false
      afterColon: true
  max-nested-callbacks:
    - 2
    - 2
  new-cap:
    - 2
    - newIsCap: true
      capIsNew: true
  new-parens: 2
  newline-after-var: 0
  no-array-constructor: 2
  no-continue: 1
  no-inline-comments: 0
  no-lonely-if: 2
  no-mixed-spaces-and-tabs: 2
  no-multiple-empty-lines:
    - 2
    - max: 1
  no-nested-ternary: 2
  no-new-object: 2
  no-spaced-func: 2
  no-ternary: 0
  no-trailing-spaces: 2
  no-underscore-dangle: 0
  no-wrap-func: 2
  one-var:
    - 2
    - "never"
  operator-assignment:
    - 1
    - "always"
  operator-linebreak:
    - 2
    - "before"
  padded-blocks:
    - 2
    - "never"
  quote-props:
    - 2
    - "as-needed"
  quotes:
    - 2
    - "single"
  semi:
    - 2
    - "always"
  semi-spacing:
    - 2
    - before: false
      after: true
  sort-vars: 0
  space-after-keywords:
    - 2
    - "always"
  space-before-blocks:
    - 2
    - "always"
  space-before-function-paren:
    - 2
    - anonymous: "always"
      named: "never"
  # FIXME: can't we accept { spaces: 'around' } and not ['no', 'spaces']?
  space-in-brackets: 0
  space-in-parens:
    - 2
    - "never"
  space-infix-ops:
    - 2
    - int32Hint: false
  space-return-throw-case: 2
  space-unary-ops:
    - 2
    - words: true
      nonwords: false
  spaced-line-comment:
    - 2
    - "always"
  wrap-regex: 0
  no-var: 1
  generator-star-spacing:
    - 2
    - "before"
  max-depth:
    - 2
    - 3
  max-len:
    - 1
    - 80
    - 4
  max-params:
    - 2
    - 3
  max-statements:
    - 2
    - 10
  no-bitwise: 1
  no-plusplus: 2
